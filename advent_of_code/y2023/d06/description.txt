### Part 1 

***Problem:***
- We're participating in a number of races and have to decide how many *discrete* units of time we spend accelerating
- As we accelerate we don't move, once we start moving, we can no longer accelerate (nor do we lose speed)
- For each unit of time spent accelerating, we gain an additional speed of 1 unit of distance per unit of time
- We are given two equal length lists of numbers: *Time* & *Distance*
- *Time* describes the total length of each race and *Distance* the distance we need to beat in order to win
- What is the product of the total number of possibilities to win in each game?


***Brute force approach:***
- Iterate time & distance tuples `(t, d)`
- Iterate all possible acceleration times (from `1` to `t-1`)
- Calculate final distance and check whether it exceeds `d`
- In each game count up all the times, in which `d` is exceeded and return the product of these numbers

___



### Part 2 

***Problem:***
- Concatenate the numbers in *Time* and *Distance* to form two very large numbers
- How many discrete winning strategies are there now?


***Approach:***
- Brute force approach won't work, because numbers are too big â€“> we need math!
- Distance travelled $d$ is a quadratic function of total time $t$ and acceleration time $x$: $\ d = (t-x) \cdot x$
- Solve for $x$ to get the formula that directly calculates the minimum $x$ needed to win: 
- $d = (t-x) \cdot x \quad => \quad x_{low} = \frac{t - \sqrt{t^2 - 4d}}{2}$ and $ \ x_{high} = \frac{t + \sqrt{t^2 - 4d}}{2}$
- For reasons of symmetry, we only need $x_{low}$, which we can get by simply plugging in $t$ and $d$ from out puzzle input
- The result is a `float` and we need the next highest `int` ($x_{int}$)
- Now we can simply subtract $x_{int}$ from both sides of the inclusive range $[0, t]$
- Since there are a total of $\ t+1$ discrete numbers in the range, the final answer is $\ t+1 - 2 x_{int}$

___